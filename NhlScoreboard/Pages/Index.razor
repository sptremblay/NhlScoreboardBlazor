@page "/"
@using NhlScoreboard.Components
@using NhlScoreboard.Models
@using System.ComponentModel
@inject HttpClient Http
<span>v1</span>

@if (scoreIndex == -1)
{
    <Clock />
}
else
{
    if (CurrentScheduledGame?.status.statusCode < 3)
    {
        <ScheduledGameInfo CurrentScheduledGame="@CurrentScheduledGame"/>
    }
    else if (CurrentScheduledGame?.status.statusCode == 3)
    {
        <LiveGameInfo CurrentScore="@CurrentScore" CurrentScheduledGame="@CurrentScheduledGame"/>
    }
    else
    {
        <ResultGameInfo CurrentScore="@CurrentScore" CurrentScheduledGame="@CurrentScheduledGame"/>
    }
}

@code {
    private List<Game> ScheduledGames { get; set; }
    private List<GameFeedLiveResponse> Scores { get; set; }
    private int scoreIndex = 0;
    private GameFeedLiveResponse CurrentScore { get; set; }
    private Game CurrentScheduledGame { get; set; }
    private TimeSpan dayChangeTime = new TimeSpan(11, 50, 00);

    protected override void OnInitialized()
    {
        base.OnInitialized();

        
        var refreshSchedule = new System.Threading.Timer((_) =>
        {
            InvokeAsync(async () =>
            {
                ScheduledGames = await LoadSchedule();
                Scores = await RefreshScores();
            });
        }, null, 0, 300000);

        var refreshScreenTimer = new System.Threading.Timer((_) =>
        {
            InvokeAsync( async ()  =>
            {
                if (ScheduledGames == null ||
                    ScheduledGames.Count == 0) 
                    return;
                
                if (scoreIndex >= 0)
                {
                    CurrentScheduledGame = ScheduledGames[scoreIndex];
                    if (CurrentScheduledGame.status.statusCode == 3)
                    {
                        CurrentScore = await Http.GetFromJsonAsync<GameFeedLiveResponse>
                            ($"https://statsapi.web.nhl.com/api/v1/game/{CurrentScheduledGame.gamePk}/feed/live");
                    }
                    else
                    {
                        CurrentScore = Scores[scoreIndex];
                    }
                }
                scoreIndex += 1;
                if (ScheduledGames != null && scoreIndex == ScheduledGames.Count)
                    scoreIndex = -1;
                StateHasChanged();
            });
        }, null, 500, 7000);

        
        
    }

    private async Task<List<Game>> LoadSchedule()
    {
        var date = DateTime.Now.ToString("yyyy-M-d");

        if (DateTime.Now.TimeOfDay < dayChangeTime) //... load previous day
        {
            date = DateTime.Now.Subtract(new TimeSpan(1, 0, 0, 0)).ToString("yyyy-M-d");
        }
        var response = await Http.GetFromJsonAsync<ScheduleResponse>
            ($"https://statsapi.web.nhl.com/api/v1/schedule?&startDate={date}&endDate={date}");

        return response?.dates[0].games;
    }
    
    private async Task<List<GameFeedLiveResponse>> RefreshScores()
    {
        var gameFeeds = new List<GameFeedLiveResponse>();
        foreach (var game in ScheduledGames)
        {
            gameFeeds.Add(await Http.GetFromJsonAsync<GameFeedLiveResponse>
                ($"https://statsapi.web.nhl.com/api/v1/game/{game.gamePk}/feed/live"));
        }
        return gameFeeds;
    }


}